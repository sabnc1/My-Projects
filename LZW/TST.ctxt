#BlueJ class context
comment0.params=
comment0.target=TST()
comment0.text=\r\n\ Initializes\ an\ empty\ string\ symbol\ table.\r\n
comment1.params=
comment1.target=int\ size()
comment1.text=\r\n\ Returns\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table.\r\n\ @return\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table\r\n
comment10.params=pattern
comment10.target=java.lang.Iterable\ keysThatMatch(java.lang.String)
comment10.text=\r\n\ Returns\ all\ of\ the\ keys\ in\ the\ symbol\ table\ that\ match\ <tt>pattern</tt>,\r\n\ where\ .\ symbol\ is\ treated\ as\ a\ wildcard\ character.\r\n\ @param\ pattern\ the\ pattern\r\n\ @return\ all\ of\ the\ keys\ in\ the\ symbol\ table\ that\ match\ <tt>pattern</tt>,\r\n\ \ \ \ \ as\ an\ iterable,\ where\ .\ is\ treated\ as\ a\ wildcard\ character.\r\n
comment11.params=args
comment11.target=void\ main(java.lang.String[])
comment11.text=\r\n\ Unit\ tests\ the\ <tt>TST</tt>\ data\ type.\r\n
comment2.params=key
comment2.target=boolean\ contains(java.lang.String)
comment2.text=\r\n\ Does\ this\ symbol\ table\ contain\ the\ given\ key?\r\n\ @param\ key\ the\ key\r\n\ @return\ <tt>true</tt>\ if\ this\ symbol\ table\ contains\ <tt>key</tt>\ and\r\n\ \ \ \ \ <tt>false</tt>\ otherwise\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>\r\n
comment3.params=key
comment3.target=java.lang.Object\ get(java.lang.String)
comment3.text=\r\n\ Returns\ the\ value\ associated\ with\ the\ given\ key.\r\n\ @param\ key\ the\ key\r\n\ @return\ the\ value\ associated\ with\ the\ given\ key\ if\ the\ key\ is\ in\ the\ symbol\ table\r\n\ \ \ \ \ and\ <tt>null</tt>\ if\ the\ key\ is\ not\ in\ the\ symbol\ table\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>\r\n
comment4.params=x\ key\ d
comment4.target=TST.Node\ get(TST.Node,\ java.lang.String,\ int)
comment5.params=s\ val
comment5.target=void\ put(java.lang.String,\ java.lang.Object)
comment5.text=\r\n\ Inserts\ the\ key-value\ pair\ into\ the\ symbol\ table,\ overwriting\ the\ old\ value\r\n\ with\ the\ new\ value\ if\ the\ key\ is\ already\ in\ the\ symbol\ table.\r\n\ If\ the\ value\ is\ <tt>null</tt>,\ this\ effectively\ deletes\ the\ key\ from\ the\ symbol\ table.\r\n\ @param\ key\ the\ key\r\n\ @param\ val\ the\ value\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>\r\n
comment6.params=x\ s\ val\ d
comment6.target=TST.Node\ put(TST.Node,\ java.lang.String,\ java.lang.Object,\ int)
comment7.params=s
comment7.target=java.lang.String\ longestPrefixOf(java.lang.String)
comment7.text=\r\n\ Returns\ the\ string\ in\ the\ symbol\ table\ that\ is\ the\ longest\ prefix\ of\ <tt>query</tt>,\r\n\ or\ <tt>null</tt>,\ if\ no\ such\ string.\r\n\ @param\ query\ the\ query\ string\r\n\ @throws\ NullPointerException\ if\ <tt>query</tt>\ is\ <tt>null</tt>\r\n\ @return\ the\ string\ in\ the\ symbol\ table\ that\ is\ the\ longest\ prefix\ of\ <tt>query</tt>,\r\n\ \ \ \ \ or\ <tt>null</tt>\ if\ no\ such\ string\r\n
comment8.params=
comment8.target=java.lang.Iterable\ keys()
comment8.text=\r\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ as\ an\ <tt>Iterable</tt>.\r\n\ To\ iterate\ over\ all\ of\ the\ keys\ in\ the\ symbol\ table\ named\ <tt>st</tt>,\r\n\ use\ the\ foreach\ notation\:\ <tt>for\ (Key\ key\ \:\ st.keys())</tt>.\r\n\ @return\ all\ keys\ in\ the\ sybol\ table\ as\ an\ <tt>Iterable</tt>\r\n
comment9.params=prefix
comment9.target=java.lang.Iterable\ keysWithPrefix(java.lang.String)
comment9.text=\r\n\ Returns\ all\ of\ the\ keys\ in\ the\ set\ that\ start\ with\ <tt>prefix</tt>.\r\n\ @param\ prefix\ the\ prefix\r\n\ @return\ all\ of\ the\ keys\ in\ the\ set\ that\ start\ with\ <tt>prefix</tt>,\r\n\ \ \ \ \ as\ an\ iterable\r\n
numComments=12
